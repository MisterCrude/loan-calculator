{"version":3,"sources":["utils/theme.ts","config/constants.ts","utils/numbers.ts","utils/loan.ts","components/dump/Table/TableLineRow.tsx","components/dump/Table/Table.tsx","components/dump/Inputs/Inputs.tsx","components/dump/Chart/Chart.tsx","components/dump/Panel/Panel.tsx","components/smart/Calculator/Calculator.tsx","components/smart/App/App.tsx","index.tsx"],"names":["theme","global","font","family","formField","border","color","label","margin","horizontal","table","body","pad","vertical","LOAN_TYPES","housing","name","interest","instance","spending","LOANS","keys","CURRENCY","bigNum","n","BigNumber","getTargetValue","num","max","min","val","toNumber","TableLineRow","payableAmount","principal","payback","year","currentBalance","payable","yearPayback","minus","multipliedBy","isLessThan","negated","calculateCurrentBalance","TableRow","TableCell","toFormat","Table","totalAmountPayable","totalPrincipalAmount","totalInterestAmount","yearsAmount","yearsRange","range","Card","width","background","Heading","level","alignSelf","TableHeader","scope","TableBody","map","key","Inputs","loanType","loanAmount","onSetLoanType","onChangeLoanAmount","onChangeYearsAmount","Box","bottom","direction","align","justify","Select","id","options","value","onChange","option","Paragraph","getLoanInterest","FormField","htmlFor","RangeInput","step","TextInput","type","Chart","Meter","size","thickness","values","aria-label","markerStyles","height","display","marginRight","Panel","monthlyPayback","fill","flex","as","style","Text","weight","Calculator","useState","setLoanType","setLoanAmount","setYearsAmount","setTotalPrincipalAmount","setTotalInterestAmount","setTotalAmountPayable","setMonthlyPayback","setYearPayback","useEffect","interestPerMonth","payableMonthsAmount","calculateLoan","e","currentTarget","App","Main","ReactDOM","render","StrictMode","Grommet","document","getElementById"],"mappings":"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","file":"static/js/main.7f7dab1e.chunk.js","sourcesContent":["import { ThemeType } from \"grommet/themes\";\n\nconst theme: ThemeType = {\n  global: {\n    font: {\n      family: \"Roboto\",\n    },\n  },\n  formField: { border: { color: \"none\" }, label: { margin: { horizontal: \"none\" } } },\n  table: {\n    body: { pad: { horizontal: \"medium\", vertical: \"small\" } },\n  },\n};\n\nexport default theme;\n","import { keys } from \"lodash/fp\";\nimport { TLoans, ICurrency } from \"@typing/loan\";\n\nexport const LOAN_TYPES: TLoans = {\n  housing: { name: \"housing loan\", interest: 3.5 },\n  instance: { name: \"instance car loan\", interest: 4.7 },\n  spending: { name: \"spending loan\", interest: 7.3 },\n};\n\nexport const LOANS: string[] = keys(LOAN_TYPES);\n\nexport const LOAN_STEP: number = 1000;\n\nexport const MAX_LOAN_AMOUT: number = 1000000;\nexport const MIN_LOAN_AMOUT: number = 10000;\nexport const MAX_YEARS_AMOUT: number = 30;\nexport const MIN_YEARS_AMOUT: number = 1;\n\nexport const CURRENCY: ICurrency = { SIGN: \"$\", CODE: \"USD\" };\n","import BigNumber from \"bignumber.js\";\n\nexport const bigNum = (n: number): BigNumber => new BigNumber(n);\n","import { toNumber } from \"lodash/fp\";\nimport BigNumber from \"bignumber.js\";\nimport { LOAN_TYPES } from \"@config/constants\";\nimport { ICalculatedLoan } from \"@typing/loan\";\nimport { bigNum } from \"@utils/numbers\";\n\nexport const calculateLoan = (\n  loanType: string,\n  loanAmount: number,\n  yearsAmount: number\n): ICalculatedLoan => {\n  const interest: number = LOAN_TYPES[loanType].interest;\n  const interestPerMonth: number = 1 + interest / 100 / 12;\n  const payableMonthsAmount: number = yearsAmount * 12;\n\n  const monthlyPayback: BigNumber = bigNum(\n    (loanAmount * (interestPerMonth ** payableMonthsAmount * (interestPerMonth - 1))) /\n      (interestPerMonth ** payableMonthsAmount - 1)\n  );\n  const yearPayback: BigNumber = monthlyPayback.multipliedBy(12);\n  const totalPrincipalAmount: BigNumber = bigNum(loanAmount);\n  const totalAmountPayable: BigNumber = monthlyPayback.multipliedBy(payableMonthsAmount);\n  const totalInterestAmount: BigNumber = monthlyPayback\n    .multipliedBy(payableMonthsAmount)\n    .minus(loanAmount);\n\n  return {\n    totalPrincipalAmount,\n    totalInterestAmount,\n    totalAmountPayable,\n    monthlyPayback,\n    yearPayback,\n  };\n};\n\nexport const getLoanInterest = (loanType: string): number => LOAN_TYPES[loanType]?.interest;\n\nexport const calculateCurrentBalance = (\n  payable: BigNumber,\n  yearPayback: BigNumber,\n  year: number\n): BigNumber => {\n  let currentBalance: BigNumber = payable.minus(yearPayback.multipliedBy(year).toNumber());\n\n  if (currentBalance.isLessThan(0)) {\n    currentBalance = currentBalance.negated();\n  }\n\n  return currentBalance;\n};\n\n// export const calculatePrincipalPaid = () => {};\n\nexport const getTargetValue = (num: number | string, max: number, min: number): number => {\n  let val: number = toNumber(num);\n\n  val = val > max ? max : val;\n  val = val < min ? min : val;\n\n  return val;\n};\n","import React from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport { calculateCurrentBalance } from \"@utils/loan\";\n\nimport { TableRow, TableCell } from \"grommet\";\n\ninterface IProps {\n  payableAmount: BigNumber;\n  principal: BigNumber;\n  interest: BigNumber;\n  payback: BigNumber;\n  year: number;\n}\n\nexport const TableLineRow: React.FC<IProps> = ({\n  payableAmount,\n  principal,\n  interest,\n  payback,\n  year,\n}) => {\n  const currentBalance: BigNumber = calculateCurrentBalance(payableAmount, payback, year);\n\n  return (\n    <TableRow>\n      <TableCell>{year}</TableCell>\n      <TableCell>{payback.toFormat(2)}</TableCell>\n      <TableCell>{principal.toFormat(2)}</TableCell>\n      <TableCell>{interest.toFormat(2)}</TableCell>\n      <TableCell>{currentBalance.toFormat(2)}</TableCell>\n    </TableRow>\n  );\n};\n","import React from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport { range } from \"lodash/fp\";\n\nimport {\n  Heading,\n  Table as TableGrommet,\n  TableHeader,\n  TableRow,\n  TableCell,\n  TableBody,\n  Card,\n} from \"grommet\";\nimport { TableLineRow } from \"./TableLineRow\";\n\ninterface IProps {\n  totalPrincipalAmount: BigNumber;\n  totalInterestAmount: BigNumber;\n  totalAmountPayable: BigNumber;\n  yearPayback: BigNumber;\n  yearsAmount: number;\n}\n\nexport const Table: React.FC<IProps> = ({\n  totalAmountPayable,\n  totalPrincipalAmount,\n  totalInterestAmount,\n  yearPayback,\n  yearsAmount,\n}) => {\n  const yearsRange: number[] = range(1, yearsAmount + 1);\n\n  return (\n    <Card width=\"large\" background=\"light-1\">\n      <Heading level=\"3\" alignSelf=\"center\" color=\"dark-2\">\n        Home Loan Amortization Schedule\n      </Heading>\n\n      <TableGrommet>\n        <TableHeader>\n          <TableRow>\n            <TableCell scope=\"col\" border=\"bottom\">\n              <strong>Year</strong>\n            </TableCell>\n            <TableCell scope=\"col\" border=\"bottom\">\n              <strong>EMI*12</strong>\n            </TableCell>\n            <TableCell scope=\"col\" border=\"bottom\">\n              <strong>Principal paid yearly</strong>\n            </TableCell>\n            <TableCell scope=\"col\" border=\"bottom\">\n              <strong>Interest paid yearly</strong>\n            </TableCell>\n            <TableCell scope=\"col\" border=\"bottom\">\n              <strong>Closing balance</strong>\n            </TableCell>\n          </TableRow>\n        </TableHeader>\n\n        <TableBody>\n          {yearsRange.map((year) => (\n            <TableLineRow\n              key={year}\n              year={year}\n              payback={yearPayback}\n              payableAmount={totalAmountPayable}\n              principal={totalPrincipalAmount}\n              interest={totalInterestAmount}\n            />\n          ))}\n        </TableBody>\n      </TableGrommet>\n    </Card>\n  );\n};\n","import React, { ChangeEventHandler } from \"react\";\nimport { getLoanInterest } from \"@utils/loan\";\nimport {\n  LOANS,\n  CURRENCY,\n  LOAN_STEP,\n  MAX_LOAN_AMOUT,\n  MIN_LOAN_AMOUT,\n  MAX_YEARS_AMOUT,\n  MIN_YEARS_AMOUT,\n} from \"@config/constants\";\n\nimport { Select, Paragraph, FormField, RangeInput, TextInput, Card, Heading, Box } from \"grommet\";\n\ninterface IProps {\n  loanType: string;\n  loanAmount: number;\n  yearsAmount: number;\n  onSetLoanType: (options: string) => void;\n  onChangeLoanAmount: ChangeEventHandler<HTMLInputElement>;\n  onChangeYearsAmount: ChangeEventHandler<HTMLInputElement>;\n}\n\nexport const Inputs: React.FC<IProps> = ({\n  loanType,\n  loanAmount,\n  yearsAmount,\n  onSetLoanType,\n  onChangeLoanAmount,\n  onChangeYearsAmount,\n}) => {\n  return (\n    <Box margin={{ bottom: \"large\" }}>\n      <Card width=\"large\" pad={{ horizontal: \"large\", bottom: \"large\" }} background=\"light-1\">\n        <Box>\n          <Heading level={3} alignSelf=\"center\" color=\"dark-2\">\n            Setup your loan parameters\n          </Heading>\n        </Box>\n\n        <Box direction=\"row\" align=\"center\" justify=\"between\" pad={{ bottom: \"medium\" }}>\n          <Box width=\"medium\">\n            <Select\n              id=\"loanType\"\n              name=\"loanType\"\n              options={LOANS}\n              value={loanType}\n              onChange={({ option }) => onSetLoanType(option)}\n            />\n          </Box>\n          <Box>\n            <Paragraph>\n              Interest rate: <strong>{getLoanInterest(loanType)}%</strong>\n            </Paragraph>\n          </Box>\n        </Box>\n\n        <Box pad={{ bottom: \"medium\" }}>\n          <FormField label={`Loan amount ${CURRENCY.SIGN}`} htmlFor=\"loanAmount\">\n            <RangeInput\n              id=\"loanAmountRange\"\n              name=\"loanAmountRange\"\n              step={LOAN_STEP}\n              max={MAX_LOAN_AMOUT}\n              min={MIN_LOAN_AMOUT}\n              value={loanAmount}\n              onChange={onChangeLoanAmount}\n            />\n          </FormField>\n\n          <Box direction=\"row\" justify=\"start\">\n            <Box width=\"small\">\n              <TextInput\n                id=\"loanAmount\"\n                name=\"loanAmount\"\n                type=\"number\"\n                value={loanAmount}\n                onChange={onChangeLoanAmount}\n              />\n            </Box>\n          </Box>\n        </Box>\n\n        <FormField label=\"Years amount\" htmlFor=\"yearsAmount\">\n          <RangeInput\n            id=\"yearsAmountRange\"\n            name=\"yearsAmountRange\"\n            max={MAX_YEARS_AMOUT}\n            min={MIN_YEARS_AMOUT}\n            value={yearsAmount}\n            onChange={onChangeYearsAmount}\n          />\n        </FormField>\n        <Box direction=\"row\" justify=\"start\">\n          <Box width=\"small\">\n            <TextInput\n              id=\"yearsAmount\"\n              name=\"yearsAmount\"\n              type=\"number\"\n              max={MAX_YEARS_AMOUT}\n              min={MIN_YEARS_AMOUT}\n              value={yearsAmount}\n              onChange={onChangeYearsAmount}\n            />\n          </Box>\n        </Box>\n      </Card>\n    </Box>\n  );\n};\n","import React from \"react\";\n\nimport { Meter } from \"grommet\";\n\ninterface IProps {\n  principal: number;\n  interest: number;\n}\n\nexport const Chart: React.FC<IProps> = ({ principal, interest }) => (\n  <Meter\n    type=\"circle\"\n    size=\"small\"\n    thickness=\"large\"\n    values={[\n      {\n        value: principal,\n        color: \"brand\",\n        label: \"principal\",\n      },\n      {\n        value: interest,\n        color: \"status-warning\",\n        label: \"interest\",\n      },\n    ]}\n    aria-label=\"meter\"\n  />\n);\n","import React from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport { CURRENCY } from \"@config/constants\";\n\nimport { Paragraph, Heading, Text, Card, Box } from \"grommet\";\nimport Chart from \"@components/dump/Chart\";\n\ninterface IProps {\n  principal: BigNumber;\n  interest: BigNumber;\n  payableAmount: BigNumber;\n  monthlyPayback: BigNumber;\n}\n\nconst markerStyles = { width: \"15px\", height: \"15px\", display: \"inline-block\", marginRight: \"5px\" };\n\nexport const Panel: React.FC<IProps> = ({ principal, interest, payableAmount, monthlyPayback }) => {\n  return (\n    <Box margin={{ bottom: \"large\" }}>\n      <Card width=\"large\" pad=\"large\" direction=\"row\" fill=\"vertical\" background=\"light-1\">\n        <Box flex=\"grow\">\n          <Paragraph>\n            <Box background=\"brand\" as=\"span\" style={markerStyles} />\n            Total Principal Amount\n            <br />\n            <Text weight=\"bold\">\n              {principal.toFormat(2)} {CURRENCY.SIGN}\n            </Text>\n          </Paragraph>\n\n          <Paragraph>\n            <Box background=\"status-warning\" as=\"span\" style={markerStyles} />\n            Total Interest Amount\n            <br />\n            <Text weight=\"bold\">\n              {interest.toFormat(2)} {CURRENCY.SIGN}\n            </Text>\n          </Paragraph>\n\n          <Paragraph>\n            Total Amount Payable\n            <br />\n            <Text weight=\"bold\">\n              {payableAmount.toFormat(2)} {CURRENCY.SIGN}\n            </Text>\n          </Paragraph>\n\n          <Heading level=\"3\">\n            Monthly Payback\n            <br />\n            <Text weight=\"bold\" size=\"xlarge\">\n              {monthlyPayback.toFormat(2)} {CURRENCY.SIGN}\n            </Text>\n          </Heading>\n        </Box>\n\n        <Box align=\"center\" justify=\"center\" flex=\"grow\">\n          <Chart principal={principal.toNumber()} interest={interest.toNumber()} />\n        </Box>\n      </Card>\n    </Box>\n  );\n};\n","import React, { useState, ChangeEventHandler, useEffect } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport { calculateLoan, getTargetValue } from \"@utils/loan\";\nimport { bigNum } from \"@utils/numbers\";\nimport {\n  LOANS,\n  MAX_LOAN_AMOUT,\n  MIN_LOAN_AMOUT,\n  MAX_YEARS_AMOUT,\n  MIN_YEARS_AMOUT,\n} from \"@config/constants\";\n\nimport Table from \"@components/dump/Table\";\nimport Inputs from \"@components/dump/Inputs\";\nimport Panel from \"@components/dump/Panel\";\n\nexport const Calculator: React.FC = () => {\n  const [loanType, setLoanType] = useState<string>(LOANS[0]);\n  const [loanAmount, setLoanAmount] = useState<number>(MIN_LOAN_AMOUT);\n  const [yearsAmount, setYearsAmount] = useState<number>(MIN_YEARS_AMOUT);\n  const [totalPrincipalAmount, setTotalPrincipalAmount] = useState<BigNumber>(bigNum(0));\n  const [totalInterestAmount, setTotalInterestAmount] = useState<BigNumber>(bigNum(0));\n  const [totalAmountPayable, setTotalAmountPayable] = useState<BigNumber>(bigNum(0));\n  const [monthlyPayback, setMonthlyPayback] = useState<BigNumber>(bigNum(0));\n  const [yearPayback, setYearPayback] = useState<BigNumber>(bigNum(0));\n\n  const handleChangeLoanAmount: ChangeEventHandler<HTMLInputElement> = (e) =>\n    setLoanAmount(getTargetValue(e.currentTarget.value, MAX_LOAN_AMOUT, MIN_LOAN_AMOUT));\n\n  const handleChangeYearsAmount: ChangeEventHandler<HTMLInputElement> = (e) =>\n    setYearsAmount(getTargetValue(e.currentTarget.value, MAX_YEARS_AMOUT, MIN_YEARS_AMOUT));\n\n  useEffect(() => {\n    const {\n      totalPrincipalAmount,\n      totalInterestAmount,\n      totalAmountPayable,\n      monthlyPayback,\n      yearPayback,\n    } = calculateLoan(loanType, loanAmount, yearsAmount);\n\n    setTotalPrincipalAmount(totalPrincipalAmount);\n    setTotalInterestAmount(totalInterestAmount);\n    setTotalAmountPayable(totalAmountPayable);\n    setMonthlyPayback(monthlyPayback);\n    setYearPayback(yearPayback);\n  }, [loanType, loanAmount, yearsAmount]);\n\n  return (\n    <>\n      <Inputs\n        loanType={loanType}\n        loanAmount={loanAmount}\n        yearsAmount={yearsAmount}\n        onSetLoanType={setLoanType}\n        onChangeLoanAmount={handleChangeLoanAmount}\n        onChangeYearsAmount={handleChangeYearsAmount}\n      />\n\n      <Panel\n        principal={totalPrincipalAmount}\n        interest={totalInterestAmount}\n        payableAmount={totalAmountPayable}\n        monthlyPayback={monthlyPayback}\n      />\n\n      <Table\n        yearsAmount={yearsAmount}\n        yearPayback={yearPayback}\n        totalAmountPayable={totalAmountPayable}\n        totalPrincipalAmount={totalPrincipalAmount}\n        totalInterestAmount={totalInterestAmount}\n      />\n    </>\n  );\n};\n","import React from \"react\";\n\nimport { Main } from \"grommet\";\nimport Calculator from \"@components/smart/Calculator\";\n\nexport const App: React.FC = () => (\n  <>\n    <Main pad={{ horizontal: \"medium\", vertical: \"large\" }} align=\"center\" background=\"light-3\">\n      <Calculator />\n    </Main>\n  </>\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport theme from \"@utils/theme\";\n\nimport { Grommet } from \"grommet\";\nimport App from \"@components/smart/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Grommet theme={theme}>\n      <App />\n    </Grommet>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}